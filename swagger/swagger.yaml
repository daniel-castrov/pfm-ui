swagger: "2.0"
info:
  version: 0.0.1
  title: JSBIS Services
  description: API services for JSCBIS
basePath: "/api"
tags:
- name: "Blank"
- name: "Community"
- name: "CreateUserRequest"
- name: "MyDetails"
- name: "Stranger"
- name: "Organization"
- name: "Permission"
- name: "Programs"
- name: "Role"
- name: "Snapshots"
- name: "User"
- name: "UserRole"
- name: "TOA"
- name: "POM"
- name: "PB"
- name: "UFRs"

#
##############################################################################
# PATHS
#
paths:
##############################################################################
# START BLANK
  /blank:
    get:
      tags:
      - "Blank"
      summary: ""
      description: ""
      operationId: "blank"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
#
# STOP BLANK
##############################################################################
# START COMMUNITIES
  /communities:
    get:
      tags:
      - "Community"
      summary: "Get all Communities"
      description: "Get all the communities"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Communities"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    post:
      tags:
      - "Community"
      summary: "Creates a Community"
      description: "Adds a Community to the Communitylist."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Community"
        required: true
        schema:
          $ref: "#/definitions/Community"
      responses:
        200:
          description: "The newly created community"
          schema:
            $ref: "#/definitions/RestResult"
        400:
          description: "Community couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
    put:
      tags:
      - "Community"
      summary: "Update a Community"
      description: "Update a Community"
      operationId: "update"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Community"
        required: true
        schema:
          $ref: "#/definitions/Community"
      responses:
        204:
          description: "Successfully updated Community"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
  /communities/{id}:
    get:
      tags:
      - "Community"
      summary: "Gets a Community"
      description: "Get a Community user identified via its id"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        description: "Community id"
        required: true
        type: "string"
      responses:
        200:
          description: "a Community"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
        500:
          description: "An unexpected error occurred."
  /communities/user/{userId}/role/{roleName}:
    get:
      tags:
      - "Community"
      summary: "Gets Communities that a user has a known Role Name"
      description: "Gets Communities that a user has a known Role Name"
      operationId: "getByUserIdAndRoleName"
      parameters:
      - name: "userId"
        in: "path"
        description: "User Id"
        required: true
        type: "string"
      - name: "roleName"
        in: "path"
        description: "The known name of a Role"
        required: true
        type: "string"
      responses:
        200:
          description: "list of Communities"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "No User or Role exists."
        500:
          description: "An unexpected error occurred."
# STOP COMMUNITIES
##############################################################################
# START POM
  /pom/{communityId}/{year}:
    post:
      tags:
      - "POM"
      summary: "Creates a new POM scenario"
      description: "Sets TOA values for a Community and its organizations"
      operationId: "createPom"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "communityId"
        description: "The community id"
        required: true
        type: "string"
      - in: "path"
        name: "year"
        description: "the year"
        required: true
        type: "integer"
      - in: "query"
        name: "model"
        description: "the PB to use as a model"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "a POM object"
        required: true
        schema:
          $ref: "#/definitions/Pom"
    get:
      tags:
      - "POM"
      summary: "Fetches an existing POM scenario"
      description: "Gets the POM information for this year"
      operationId: "getByIdAndYear"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "communityId"
        description: "The community id"
        required: true
        type: "string"
      - in: "path"
        name: "year"
        description: "the year"
        required: true
        type: "integer"
  /pom/{communityId}:
    get:
      tags:
      - "POM"
      summary: "Fetches all existing POMs for this community"
      description: "Gets the POM information"
      operationId: "getById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "communityId"
        description: "The community id"
        required: true
        type: "string"
  /pom/community/{communityId}/year/{year}:
    get:
      tags:
      - "POM"
      operationId: "getByCommunityAndYear"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "communityId"
        required: true
        type: "string"
      - in: "path"
        name: "year"
        required: true
        type: "number"
# STOP POM
##############################################################################
# START PR
  /pr/phase/{phaseId}:
    get:
      tags:
      - "PR"
      operationId: "getByPhase"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "phaseId"
        required: true
        type: "string"
# STOP PR
##############################################################################
# START PB
  /pb/{communityId}:
    get:
      tags:
      - "PB"
      summary: "Fetches all existing PBs for this community"
      description: "Gets the PB information"
      operationId: "getById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "communityId"
        description: "The community id"
        required: true
        type: "string"
# END PB
##############################################################################
# START CREATEUSERREQUEST
  /createUserRequests:
    post:
      tags:
      - "CreateUserRequest"
      summary: "Creates a CreateUserRequest"
      description: "Adds a CreateUserRequest."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a CreateUserRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateUserRequest"
  /createUserRequests/community/{commId}:
    get:
      tags:
      - "CreateUserRequest"
      summary: "Gets a CreateUserRequest"
      description: "Get a CreateUserRequest user identified via its id"
      operationId: "getByCommId"
      parameters:
      - name: "commId"
        in: "path"
        description: "CreateUserRequest id"
        required: true
        type: "string"
  /createUserRequests/{id}:
    get:
      tags:
      - "CreateUserRequest"
      summary: "Gets a CreateUserRequest"
      description: "Get a CreateUserRequest user identified via its id"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        description: "CreateUserRequest id"
        required: true
        type: "string"
  /createUserRequests/{createUserRequestId}/status:
    post:
      tags:
      - "CreateUserRequest"
      summary: "Approve a CreateUserRequest"
      description: "Approves a new CreateUserRequest"
      operationId: "status"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "status"
        description: "a Status"
        required: true
        schema:
          $ref: "#/definitions/Status"
      - in: "path"
        name: "createUserRequestId"
        description: "createUserRequestId"
        required: true
        type: "string"
# STOP CREATEUSERREQUEST
##############################################################################
# START JOINCOMMUNITYREQUEST
  /joinCommunityRequests:
    post:
      tags:
      - "JoinCommunityRequest"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/JoinCommunityRequest"
  /joinCommunityRequests/community/{commId}:
    get:
      tags:
      - "JoinCommunityRequest"
      operationId: "getByCommId"
      parameters:
      - name: "commId"
        in: "path"
        required: true
        type: "string"
  /joinCommunityRequests/user/{userId}:
    get:
      tags:
      - "JoinCommunityRequest"
      operationId: "getByUser"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
  /joinCommunityRequests/{id}:
    get:
      tags:
      - "JoinCommunityRequest"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
  /joinCommunityRequests/{requestId}/status:
    post:
      tags:
      - "JoinCommunityRequest"
      operationId: "status"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "status"
        required: true
        schema:
          $ref: "#/definitions/Status"
      - in: "path"
        name: "requestId"
        required: true
        type: "string"
# STOP JOINCOMMUNITYREQUEST
##############################################################################
# START LEAVECOMMUNITYREQUEST
  /leaveCommunityRequests:
    post:
      tags:
      - "LeaveCommunityRequest"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/LeaveCommunityRequest"
  /leaveCommunityRequests/community/{commId}:
    get:
      tags:
      - "LeaveCommunityRequest"
      operationId: "getByCommId"
      parameters:
      - name: "commId"
        in: "path"
        required: true
        type: "string"
  /leaveCommunityRequests/user/{userId}:
    get:
      tags:
      - "LeaveCommunityRequest"
      operationId: "getByUser"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
  /leaveCommunityRequests/{id}:
    get:
      tags:
      - "LeaveCommunityRequest"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
  /leaveCommunityRequests/{requestId}/status:
    post:
      tags:
      - "LeaveCommunityRequest"
      operationId: "status"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "status"
        required: true
        schema:
          $ref: "#/definitions/Status"
      - in: "path"
        name: "requestId"
        required: true
        type: "string"
# STOP LEAVECOMMUNITYREQUEST
##############################################################################
# START MYDETAILS
  /mydetails:
    get:
      tags:
      - "MyDetails"
      summary: "Get the current user"
      description: "Get the current user"
      operationId: "getCurrentUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "current User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    put:
      tags:
      - "MyDetails"
      summary: "Update "
      description: "Update the current user"
      operationId: "updateCurrentUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the Current User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: "Successfully updated User"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
# STOP MYDETAILS
##############################################################################
# START ORGANIZATIONS
#
#/organizations/name/{name}

  /organizations:
    get:
      tags:
      - "Organization"
      summary: "Get all"
      description: "Get all the Organization in a community"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Organizations"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /organizations/{orgId}:
    get:
      tags:
      - "Organization"
      summary: "Get an organization by its id"
      description: "Get an organization by its id"
      operationId: "get"
      parameters:
      - name: "orgId"
        in: "path"
        description: "am id "
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "An Organization"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /organizations/abbreviation/{abbr}:
    get:
      tags:
      - "Organization"
      summary: "Get an organization by its abbreviation"
      description: "Get an organization by its abbreviation"
      operationId: "getByAbbreviation"
      parameters:
      - name: "abbr"
        in: "path"
        description: "an abbreviation"
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "An Organization"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /organizations/name/{name}:
    get:
      tags:
      - "Organization"
      summary: "Get an organization by its name"
      description: "Get an organization by its name"
      operationId: "getByName"
      parameters:
      - name: "name"
        in: "path"
        description: "a name "
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "An Organization"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /organizations/community/{communityId}:
    get:
      tags:
      - "Organization"
      summary: "Get organizations by community"
      description: "Get an organization by its name"
      operationId: "getByCommunityId"
      parameters:
      - name: "communityId"
        in: "path"
        description: "a name "
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Organizations"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP ORGANIZATIONS
##############################################################################
# START PERMISSIONS
  /permissions:
    get:
      tags:
      - "Permission"
      summary: "Get all Permissions"
      description: "Get all the Permissions"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Permissions"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    post:
      tags:
      - "Permission"
      summary: "Creates a Permission"
      description: "Creates a new a Permission."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Permission"
        required: true
        schema:
          $ref: "#/definitions/Permission"
      responses:
        201:
          description: "Permission successfully created."
        400:
          description: "Permission couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."  
    delete:
      tags:
      - "Permission"
      summary: "delete a Permission"
      description: "delete a Permission"
      operationId: "deleteAll"
      parameters:
      - in: "body"
        name: "body"
        description: "a Permission"
        required: true
        schema:
          $ref: "#/definitions/Permission"
      responses:
        204:
          description: "deleted a Permission."
        403:
          description: "Forbidden"
        404:
          description: "Permission does not exist."
        500:
          description: "An unexpected error occurred."
  /permissions/role/{roleId}:
    get:
      tags:
      - "Permission"
      summary: "Find all the Permissions for a Role by the roleId"
      description: "Find all the Permissions for a Role by the roleId"
      operationId: "getPermissionsByRoleId"
      parameters:
      - name: "roleId"
        in: "path"
        description: "Role id"
        required: true
        type: "string"
      responses:
        200:
          description: "a Permission"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Role does not exist."
        500:
          description: "An unexpected error occurred."
  /permissions/{permission}:
    get:
      tags:
      - "Permission"
      summary: "Find all the Permissions (Roles and all) by the Permission string"
      description: "Find all the Permissions (Roles and all) by the Permission string"
      operationId: "getPermissionsByPermissionId"
      parameters:
      - name: "permission"
        in: "path"
        description: "permission string"
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Permissions"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP PERMISSIONS
##############################################################################
# START ROLES
  /roles:
    get:
      tags:
      - "Role"
      summary: "List of Roles"
      description: "Returns a list containing all Roles"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Roles"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    post:
      tags:
      - "Role"
      summary: "Create a new Role"
      description: "Create a new Role"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Role"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        201:
          description: "Role successfully created."
        400:
          description: "Role couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
  /roles/{roleId}:
    get:
      tags:
      - "Role"
      summary: "Get a Role by Id"
      description: "Returns a Role with the given id"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A Role"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    delete:
      tags:
      - "Role"
      summary: "Delete a Role by Id"
      description: "Deletes a Role with the given id"
      operationId: "deleteById"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "deleted a Role."
        403:
          description: "Forbidden"
        404:
          description: "Role does not exist."
        500:
          description: "An unexpected error occurred."
  /roles/community/{communityId}:
    get:
      tags:
      - "Role"
      summary: "Get all Roles for a community"
      description: "Returns all Roles for a community"
      operationId: "getByCommunityId"
      produces:
      - "application/json"
      parameters:
      - name: "communityId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "List of Roles"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /roles/community/{communityId}/name/{name}:
    get:
      tags:
      - "Role"
      summary: "Get one Role by name and communityId"
      description: "Returns one Role by name and communityId"
      operationId: "getByNameAndCommunityId"
      produces:
      - "application/json"
      parameters:
      - name: "communityId"
        in: "path"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "One Role"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /roles/user/{userId}/community/{communityId}:
    get:
      tags:
      - "Role"
      summary: "Get all Roles a User has in a Community"
      description: "Returns all Roles a User has in a Community"
      operationId: "getByUserIdAndCommunityId"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "communityId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "List of Roles"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
# STOP ROLES
##############################################################################
# START STRANGER
  /stranger:
    get:
      tags:
      - "Stranger"
      summary: "List of all users"
      description: "Returns a list containing all Users"
      operationId: "get"
      produces:
      - "application/json"
      responses:
        200:
          description: "A stranger object"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP STRANGER
##############################################################################
# START USERS
  /users:
    get:
      tags:
      - "User"
      summary: "List of all users"
      description: "Returns a list containing all Users"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of users"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    put:
      tags:
      - "User"
      summary: "changes a user"
      operationId: "updateUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the User"
        required: true
        schema:
          $ref: "#/definitions/User"
      produces:
      - "application/json"
      responses:
        204:
          description: "Successfully updated a User"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
  /users/{id}:
    get:
      tags:
      - "User"
      summary: "Get a user by Id"
      description: "Returns a User with the given id"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /users/community/{commId}:
    get:
      tags:
      - "User"
      summary: "Get a users by CommunityId"
      description: "Returns a Users for a given Community"
      operationId: "getByCommId"
      produces:
      - "application/json"
      parameters:
      - name: "commId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A List of Users"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /users/community/{communityId}/role/{roleName}:
    get:
      tags:
      - "User"
      summary: "Get Users by CommunityId and Rolename"
      description: "Returns all Users by CommunityId and Rolename"
      operationId: "getByCommunityIdAndRoleName"
      produces:
      - "application/json"
      parameters:
      - name: "communityId"
        in: "path"
        required: true
        type: "string"
      - name: "roleName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "List of Users"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
# STOP USERS
##############################################################################
# START USERROLES
  /userRoles:
    post:
      tags:
      - "UserRole"
      summary: "Creates a UserRole"
      description: "Creates a UserRole"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a UserRole"
        required: true
        schema:
          $ref: "#/definitions/UserRole"
      responses:
        201:
          description: "UserRole successfully created."
        400:
          description: "UserRole couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
  /userRoles/{userRoleId}:
    delete:
      tags:
      - "UserRole"
      summary: "Deletes a UserRole"
      description: "Delete a UserRole"
      operationId: "deleteById"
      parameters:
      - name: "userRoleId"
        in: "path"
        description: "UserRoleId"
        required: true
        type: "string"
      responses:
        204:
          description: "UserRole successfully deleted."
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
  /userRoles/user/{userId}:
    get:
      tags:
      - "UserRole"
      summary: "Gets all UserRoles for a user"
      description: "Gets all UserRoles for a user"
      operationId: "getUserRolesbyUserId"
      parameters:
      - name: "userId"
        in: "path"
        description: "User Id"
        required: true
        type: "string"
      responses:
        200:
          description: "List of UserRoles"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "User does not exist."
        500:
          description: "An unexpected error occurred."
  /userRoles/user/{userId}/community/{communityId}/role/{roleName}:
    get:
      tags:
      - "UserRole"
      operationId: "getUserRolesbyUserAndCommunityAndRoleName"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "communityId"
        in: "path"
        required: true
        type: "string"
      - name: "roleName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "List of UserRoles"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "User does not exist."
        500:
          description: "An unexpected error occurred."

# STOP USERROLES
##############################################################################
# START PROGRAMS
  /programs/{programId}:
    get:
      tags:
      - "Programs"
      operationId: "getProgramById"
      parameters:
      - name: "programId"
        in: "path"
        required: true
        type: "string"
      summary: "Get one program"
      description: "Returns a given program"
      produces:
      - "application/json"
      responses:
        200:
          description: "A program object"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /programs:
    get:
      tags:
      - "Programs"
      operationId: "getAll"
      summary: "Get all programs"
      description: "Returns all programs"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of programs"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /exports:
    get:
      tags:
      - "Programs"
      operationId: "getExportYears"
      summary: "Get all export years"
      description: "Returns all years we an export"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of export years"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /search/tags:
    get:
      tags:
      - "Programs"
      operationId: "getSearchTags"
      summary: "Gets all type names"
      description: "Returns a collection of type names"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of strings"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /search/blins:
    get:
      tags:
      - "Programs"
      operationId: "getSearchBlins"
      summary: "Gets all blins in use"
      description: "Returns a collection of blins"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of strings"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /search/agencies:
    get:
      tags:
      - "Programs"
      operationId: "getSearchAgencies"
      summary: "Gets all opAgencies in use"
      description: "Returns a collection of OpAgencies"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of strings"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /search/appropriations:
    get:
      tags:
      - "Programs"
      operationId: "getSearchAppropriations"
      summary: "Gets all Appropriations in use"
      description: "Returns a collection of Appropriations"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of strings"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /search/tags/{type}:
    get:
      tags:
      - "Programs"
      operationId: "getTagsByType"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      summary: "Gets all the tags for a given type"
      description: "Returns tags for a type"
      produces:
      - "application/json"
      responses:
        200:
          description: "All the tags for this type"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /search:
    post:
      tags:
      - "Programs"
      operationId: "search"
      summary: "Search programs based on criteria"
      description: "Returns a collection of programs that meet the criteria"
      parameters:
      - in: "body"
        name: "body"
        description: "a ProgramFilter"
        required: true
        schema:
          $ref: "#/definitions/ProgramFilter"
      produces:
      - "application/json"
      responses:
        200:
          description: "A collection of Programs"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP PROGRAMS
##############################################################################
# START UFRs
  /ufrs/{ufrId}:
    get:
      tags:
      - "UFRs"
      operationId: "getUfrById"
      parameters:
      - name: "ufrId"
        in: "path"
        required: true
        type: "string"
      summary: "Get one UFR"
      description: "Returns the requested UFR"
      produces:
      - "application/json"
      responses:
        200:
          description: "A program object"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /ufrs/{communityId}/{year}:
    get:
      tags:
      - "UFRs"
      summary: "Gets a list of UFRs for this community and year"
      description: "Gets UFRs as specified"
      operationId: "getAll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "communityId"
        description: "The community id"
        required: true
        type: "string"
      - in: "path"
        name: "year"
        description: "the year"
        required: true
        type: "integer"
# STOP UFRs
##############################################################################
# START SNAPSHOTS
# 
  /snapshots:
    get:
      operationId: "getAll"
      tags:
      - "Snapshots"
      summary: "Gets a mapping for snapshot names and creation dates"
      description: "Returns snapshots map"
      produces:
      - "application/json"
      responses:
        200:
          description: "A mapping of snapshot labels, create dates"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
  /snapshots/{name}/programs:
    get:
      operationId: "getPrograms"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      tags:
      - "Snapshots"
      summary: "Gets programs associated with this snapshot"
      description: "Returns a collection of snapshots"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of program objects"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP SNAPSHOTS
#################################################################
# END PATHS
#################################################################
#
# START DEFINITONS
# 
definitions:
  AuthUser:
    type: "object"
    properties:
      email:
        type: "string"
      fullName:
        type: "string"
      admin:
        type: "boolean"
      rolenames:
        type: "array"
        items:
          type: "string"
      currentCommunity:
        type: "object"
  Communication:
    type: "object"
    properties:
      primaryEmail:
        type: "string"
      primaryPhone:
        type: "string"
  Community:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      abbreviation:
        type: "string"
  CreateUserRequest:
    type: "object"
    properties:
      id:
        type: "string"
      cn:
        type: "string"
      firstName:
        type: "string"
      middleInitial:
        type: "string"
      lastName:
        type: "string"
      titleRank:
        type: "string"
      dutyJob:
        type: "string"
      contactEmail:
        type: "string"
      phone:
        type: "string"
      street:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      zipCode:
        type: "string"
      organization:
        type: "string"
      communityId:
        type: "string"
      sponsorName:
        type: "string"
      sponsorEmail:
        type: "string"
      sponsorPhone:
        type: "string"
      nda:
        type: "string"
      dateApplied:
        type: "string"
      dateDecided:
        type: "string"
      service:
        type: "string"
      status:
        type: "string"
  JoinCommunityRequest:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      communityId:
        type: "string"
      dateApplied:
        type: "string"
      dateDecided:
        type: "string"
      status:
        type: "string"
  LeaveCommunityRequest:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      communityId:
        type: "string"
      dateApplied:
        type: "string"
      dateDecided:
        type: "string"
      status:
        type: "string"
  Permission:
    type: "object"
    properties:
      id:
        type: "string"
      roleId:
        type: "string"
      permission:
        type: "string"
  RestResult:
    type: "object"
    properties:
      error:
        type: "string"
      result:
        type: "object"
  Role:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      desc:
        type: "string"
      communityId:
        type: "string"
  Status:
    type: "string"
  Stranger:
    type: "object"
    properties:
      cn:
        type: "string"
      contractor:
        type: "boolean"
      nda:
        type: "string"
      communities:
        type: "array"
        items:
          $ref: "#/definitions/Community"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      cn:
        type: "string"
      firstName:
        type: "string"
      middleInitial:
        type: "string"
      lastName:
        type: "string"
      suspended:
        type: "boolean"
      communication:
        type: "object"
        $ref: "#/definitions/Communication"
      currentCommunityId:
        type: "string"
      preferences:
        type: "object"
        additionalProperties:
            type: string
  UserRole:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      roleId:
        type: "string"
  Tag:
    type: "object"
    properties:
      id:
        type: "string"
      abbr:
        type: "string"
      name:
        type: "string"
  IntMap:
    type: "object"
    additionalProperties:
      type: "integer"
  StringMap:
    type: "object"
    additionalProperties:
      type: "string"
  FundingLine:
    type: "object"
    properties:
      tags:
        $ref: '#/definitions/StringMap'
      id:
        type: "string"
      appropriation:
        type: "string"
      blin:
        type: "string"
      opAgency:
        type: "string"
      item:
        type: "string"
      fy:
        type: "integer"
      funds:
        $ref: '#/definitions/IntMap'
      variants:
        type: "array"
        items:
          $ref: "#/definitions/Variant"
  Milestone:
    type: "object"
    properties:
      start:
        type: "integer"
      end:
        type: "integer"
      phase:
        type: "string"
      name:
        type: "string"
      acronym:
        type: "string"
      status:
        type: "string"
  Organization:
    type: "object"
    properties:
      id:
        type: "string"
      communityId:
        type: "string"
      name:
        type: "string"
      abbreviation:
        type: "string"
  TOA:
    type: "object"
    properties:
      year:
        type: "integer"
      amount:
        type: "number"
  Variant:
    type: "object"
    properties:
      shortName:
        type: "string"
      longName:
        type: "string"
      description:
        type: "string"
      branch:
        type: "string"
      contractor:
        type: "string"
      quantity:
        $ref: '#/definitions/IntMap'
      unitCost:
        type: "number"
  Program:
    type: "object"
    properties:
      id:
        type: "string"
      tags:
        $ref: '#/definitions/StringMap'
      description:
        type: "string"
      parentId:
        type: "string"
      infolink:
        type: "string"
      imgLink:
        type: "string"
      shortName:
        type: "string"
      longName:
        type: "string"
      type:
        type: "string"
      execution:
        type: "string"
      milestones:
        type: "array"
        items:
          $ref: "#/definitions/Milestone"
      funding:
        type: "array"
        items:
          $ref: "#/definitions/FundingLine"
      fy:
        type: "integer"
      variants:
        type: "array"
        items:
          $ref: "#/definitions/Variant"
      emphases:
        type: "array"
        items:
          $ref: "string"
  ProgramFilter:
    type: "object"
    properties:
      tagCriteria:
        $ref: '#/definitions/StringMap'
      blin:
        type: 'string'
      agency:
        type: 'string'
      appropriation:
        type: 'string'
  UFRFilter:
    type: "object"
    properties:
      orgId:
        type: "string"
      fa:
        type: "string"
      from:
        type: "integer"
      to:
        type: "integer"
      yoe: 
        type: "boolean"
      active:
        type: "boolean"
      status:
        type: "string"
      disposition:
        type: "string"
      cycle:
        type: "string"


  UFR:
    type: "object"
    properties:
      id:
        type: "string"
      tags:
        $ref: '#/definitions/StringMap'
      description:
        type: "string"
      parentId:
        type: "string"
      originatingProgramId:
        type: "string"
      infolink:
        type: "string"
      imgLink:
        type: "string"
      shortName:
        type: "string"
      longName:
        type: "string"
      type:
        type: "string"
      yoe:
        type: "boolean"
      status:
        type: "string"
      disposition:
        type: "string"
      lastmod:
        type: "integer"
      notes:
        type: "string"
      justification:
        type: "string"
      number:
        type: "integer"
      created:
        type: "integer"      
      funding:
        type: "array"
        items:
          $ref: "#/definitions/FundingLine"
      fy:
        type: "integer"
      variants:
        type: "array"
        items:
          $ref: "#/definitions/Variant"
      emphases:
        type: "array"
        items:
          $ref: "string"
  Pom:
    type: "object"
    properties:
      id:
        type: 'string'
      communityId:
        type: 'string'
      fy:
        type: 'integer'
      communityToas:
        type: "array"
        items:
          $ref: "#/definitions/TOA"
      orgToas:
        type: "object"
        additionalProperties:
          type: 'array'
          items:
            $ref: "#/definitions/TOA"
      status:
        type: 'string'
      startdate: 
        type: 'integer'
      enddate:
        type: 'integer'
  ProgrammaticRequest:
    type: "object"
    properties:
      id:
        type: 'string'
      state:
        type: 'string'
      funding:
        type: "array"
        items:
          $ref: "#/definitions/FundingLine"
      shortname:
        type: 'string'
  FundingLine:
    type: "object"
    properties:
      id:
        type: 'string'
      appropriation:
        type: 'string'
      blin:
        type: 'string'
      opAgency:
        type: 'string'
      item:
        type: 'string'
      funds:
        type: 'object'
      fy:
        type: 'number'
      variants:
        type: 'object'
  PB:
    type: "object"
    properties:
      id:
        type: 'string'
      communityId:
        type: 'string'      
      fy:
        type: 'integer'
      startdate: 
        type: 'integer'
      enddate:
        type: 'integer'
##############################################################################
# ENDFILE
