swagger: "2.0"
info:
  version: 0.0.1
  title: JSBIS Services
  description: API services for JSCBIS
basePath: "/api"
tags:
- name: "Blank"
- name: "Community"
- name: "CreateUserRequest"
- name: "MyDetails"
- name: "Stranger"
- name: "Permission"
- name: "Role"
- name: "User"
- name: "UserRole"
#
##############################################################################
# PATHS
#
paths:
##############################################################################
# START BLANK
  /blank:
    get:
      tags:
      - "Blank"
      summary: ""
      description: ""
      operationId: "blank"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
#
# STOP BLANK
##############################################################################
# START COMMUNITIES
  /communities:
    get:
      tags:
      - "Community"
      summary: "Get all Communities"
      description: "Get all the communities"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Communities"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    post:
      tags:
      - "Community"
      summary: "Creates a Community"
      description: "Adds a Community to the Communitylist."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Community"
        required: true
        schema:
          $ref: "#/definitions/Community"
      responses:
        201:
          description: "Community successfully created."
        400:
          description: "Community couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
    put:
      tags:
      - "Community"
      summary: "Update a Community"
      description: "Update a Community"
      operationId: "update"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Community"
        required: true
        schema:
          $ref: "#/definitions/Community"
      responses:
        204:
          description: "Successfully updated Community"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
  /communities/{id}:
    get:
      tags:
      - "Community"
      summary: "Gets a Community"
      description: "Get a Community user identified via its id"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        description: "Community id"
        required: true
        type: "string"
      responses:
        200:
          description: "a Community"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
        500:
          description: "An unexpected error occurred."
# STOP COMMUNITIES
##############################################################################
# START CREATEUSERREQUEST
  /createUserRequest:
    post:
      tags:
      - "CreateUserRequest"
      summary: "Creates a CreateUserRequest"
      description: "Adds a CreateUserRequest."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a CreateUserRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateUserRequest"
      responses:
        201:
          description: "CreateUserRequest successfully created."
        400:
          description: "CreateUserRequest couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
    get:
      tags:
      - "CreateUserRequest"
      summary: "Gets a CreateUserRequest"
      description: "Get a CreateUserRequest user identified via its id"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        description: "CreateUserRequest id"
        required: true
        type: "string"
      responses:
        200:
          description: "a CreateUserRequest"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "CreateUserRequest does not exist."
        500:
          description: "An unexpected error occurred."
  /createUserRequest/{createUserRequestId}/status:
    post:
      tags:
      - "CreateUserRequest"
      summary: "Approve a CreateUserRequest"
      description: "Approves a new CreateUserRequest"
      operationId: "approve"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Status"
        required: true
        schema:
          $ref: "#/definitions/CreateUserRequest"
      - name: "createUserRequestId"
        in: "path"
        description: "Role id"
        required: true
        type: "string"
      responses:
        201:
          description: "CreateUserRequest successfully updated."
        400:
          description: "CreateUserRequest couldn't be updated."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
# STOP CREATEUSERREQUEST
##############################################################################
# START MYDETAILS
  /mydetails:
    get:
      tags:
      - "MyDetails"
      summary: "Get the current user"
      description: "Get the current user"
      operationId: "getCurrentUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "current User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    put:
      tags:
      - "MyDetails"
      summary: "Update "
      description: "Update the current user"
      operationId: "updateCurrentUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the Current User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: "Successfully updated User"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
# STOP MYDETAILS
##############################################################################
# START PERMISSIONS
  /permissions:
    get:
      tags:
      - "Permission"
      summary: "Get all Permissions"
      description: "Get all the Permissions"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Permissions"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    post:
      tags:
      - "Permission"
      summary: "Creates a Permission"
      description: "Creates a new a Permission."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Permission"
        required: true
        schema:
          $ref: "#/definitions/Permission"
      responses:
        201:
          description: "Permission successfully created."
        400:
          description: "Permission couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."  
    delete:
      tags:
      - "Permission"
      summary: "delete a Permission"
      description: "delete a Permission"
      operationId: "deleteAll"
      parameters:
      - in: "body"
        name: "body"
        description: "a Permission"
        required: true
        schema:
          $ref: "#/definitions/Permission"
      responses:
        204:
          description: "deleted a Permission."
        403:
          description: "Forbidden"
        404:
          description: "Permission does not exist."
        500:
          description: "An unexpected error occurred."
  /permissions/role/{roleId}:
    get:
      tags:
      - "Permission"
      summary: "Find all the Permissions for a Role by the roleId"
      description: "Find all the Permissions for a Role by the roleId"
      operationId: "getPermissionsByRoleId"
      parameters:
      - name: "roleId"
        in: "path"
        description: "Role id"
        required: true
        type: "string"
      responses:
        200:
          description: "a Permission"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Role does not exist."
        500:
          description: "An unexpected error occurred."
  /permissions/{permission}:
    get:
      tags:
      - "Permission"
      summary: "Find all the Permissions (Roles and all) by the Permission string"
      description: "Find all the Permissions (Roles and all) by the Permission string"
      operationId: "getPermissionsByPermissionId"
      parameters:
      - name: "permission"
        in: "path"
        description: "permission string"
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Permissions"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP PERMISSIONS
##############################################################################
# START ROLES
  /roles:
    get:
      tags:
      - "Role"
      summary: "List of Roles"
      description: "Returns a list containing all Roles"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Roles"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    post:
      tags:
      - "Role"
      summary: "Create a new Role"
      description: "Create a new Role"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Role"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        201:
          description: "Role successfully created."
        400:
          description: "Role couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
  /roles/{roleId}:
    get:
      tags:
      - "Role"
      summary: "Get a Role by Id"
      description: "Returns a Role with the given id"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A Role"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    delete:
      tags:
      - "Role"
      summary: "Delete a Role by Id"
      description: "Deletes a Role with the given id"
      operationId: "deleteById"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "deleted a Role."
        403:
          description: "Forbidden"
        404:
          description: "Role does not exist."
        500:
          description: "An unexpected error occurred."
# STOP ROLES
##############################################################################
# START STRANGER
  /stranger:
    get:
      tags:
      - "Stranger"
      summary: "List of all users"
      description: "Returns a list containing all Users"
      operationId: "get"
      produces:
      - "application/json"
      responses:
        200:
          description: "A stranger object"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP STRANGER
##############################################################################
# START USERS
  /users:
    get:
      tags:
      - "User"
      summary: "List of all users"
      description: "Returns a list containing all Users"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of users"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    put:
      tags:
      - "User"
      summary: "changes a user"
      operationId: "updateUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the User"
        required: true
        schema:
          $ref: "#/definitions/User"
      produces:
      - "application/json"
      responses:
        204:
          description: "Successfully updated a User"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
  /users/{id}:
    get:
      tags:
      - "User"
      summary: "Get a user by Id"
      description: "Returns a User with the given id"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /users/community/{commId}:
    get:
      tags:
      - "User"
      summary: "Get a users by CommunityId"
      description: "Returns a Users for a given Community"
      operationId: "getByCommId"
      produces:
      - "application/json"
      parameters:
      - name: "commId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A List of Users"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /users/{userId}community/{commId}/role/{roleName}:
    put:
      tags:
      - "User"
      summary: "changes a user"
      operationId: "assignUserRole"
      consumes:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User Id"
        required: true
        type: "string"
      - name: "commId"
        in: "path"
        description: "Community Id"
        required: true
        type: "string"
      - name: "roleName"
        in: "path"
        description: "Community Id"
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        204:
          description: "Successfully updated a User"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
# STOP USERS
##############################################################################
# START USERROLES
  /userRoles:
    post:
      tags:
      - "UserRole"
      summary: "Creates a UserRole"
      description: "Creates a UserRole"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a UserRole"
        required: true
        schema:
          $ref: "#/definitions/UserRole"
      responses:
        201:
          description: "UserRole successfully created."
        400:
          description: "UserRole couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
  /userRoles/{userId}:
    delete:
      tags:
      - "UserRole"
      summary: "Deletes all UserRole for a user"
      description: "Delete all  UserRole user identified via its userId"
      operationId: "deleteById"
      parameters:
      - name: "userId"
        in: "path"
        description: "UserRole userId"
        required: true
        type: "string"
      responses:
        204:
          description: "UserRole successfully deleted."
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
  /userRoles/community/{commId}:
     get:
      tags:
      - "UserRole"
      summary: "Gets all UserRoles for a Community"
      description: "Get all UserRoles for a Community id"
      operationId: "getUserRoles"
      parameters:
      - name: "commId"
        in: "path"
        description: "Community Id"
        required: true
        type: "string"
      responses:
        200:
          description: "List of UserRoles"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
  /userRoles/user/{userId}/community/{commId}:
    get:
      tags:
      - "UserRole"
      summary: "Gets all UserRoles user in a Community "
      description: "Gets all UserRoles user in a Community"
      operationId: "getUserRolesforCommunity"
      parameters:
      - name: "userId"
        in: "path"
        description: "User Id"
        required: true
        type: "string"
      - name: "commId"
        in: "path"
        description: "Community Id"
        required: true
        type: "string"
      responses:
        200:
          description: "List of UserRoles"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
# STOP USERROLES
##############################################################################
# 
# END PATHS
#
#################################################################
#
# START DEFINITONS
# 
definitions:
  AuthUser:
    type: "object"
    properties:
      email:
        type: "string"
      fullName:
        type: "string"
      rolenames:
        type: "array"
        items:
          type: "string"
  Communication:
    type: "object"
    properties:
      primaryEmail:
        type: "string"
      primaryPhone:
        type: "string"
  Community:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      identifier:
        type: "string"
  CreateUserRequest:
    type: "object"
    properties:
      id:
        type: "string"
      cn:
        type: "string"
      firstName:
        type: "string"
      middleInitial:
        type: "string"
      lastName:
        type: "string"
      titleRank:
        type: "string"
      dutyJob:
        type: "string"
      contactEmail:
        type: "string"
      phone:
        type: "string"
      street:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      zipCode:
        type: "string"
      organization:
        type: "string"
      community:
        type: "string"
      sponsorName:
        type: "string"
      sponsorEmail:
        type: "string"
      sponsorPhone:
        type: "string"
      nda:
        type: "string"
      dateApplied:
        type: "string"
      dateDecided:
        type: "string"
      service:
        type: "string"
      status:
        type: "string"
  Permission:
    type: "object"
    properties:
      id:
        type: "string"
      roleId:
        type: "string"
      permission:
        type: "string"
  RestResult:
    type: "object"
    properties:
      error:
        type: "string"
      result:
        type: "object"
  Role:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      desc:
        type: "string"
      communityId:
        type: "string"
  Stranger:
    type: "object"
    properties:
      cn:
        type: "string"
      contractor:
        type: "boolean"
      nda:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      cn:
        type: "string"
      firstName:
        type: "string"
      middleInitial:
        type: "string"
      lastName:
        type: "string"
      suspended:
        type: "boolean"
      communication:
        type: "object"
        $ref: "#/definitions/Communication"
      defaultCommunity:
        type: "string"
      preferences:
        type: "object"
        additionalProperties:
            type: string
  UserRole:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      roleId:
        type: "string"
##############################################################################
# ENDFILE
