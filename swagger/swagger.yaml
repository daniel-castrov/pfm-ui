swagger: "2.0"
info:
  version: 0.0.1
  title: JSBIS Services
  description: API services for JSCBIS
basePath: "/api"
tags:
- name: "Blank"
- name: "Community"
- name: "MyDetails"
- name: "Permission"
- name: "Role"
- name: "User"
- name: "UserRole"
# EXPERIMENTAL
- name: "Program"
- name: "FundLine"
- name: "Tag"
#
##############################################################################
# PATHS
#
paths:
##############################################################################
# START BLANK
  /blank:
    get:
      tags:
      - "Blank"
      summary: ""
      description: ""
      operationId: "blank"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
#
# STOP BLANK
##############################################################################
# START COMMUNITIES
  /communities:
    get:
      tags:
      - "Community"
      summary: "Get all Communities"
      description: "Get all the communities"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Communities"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    post:
      tags:
      - "Community"
      summary: "Creates a Community"
      description: "Adds a Community to the Communitylist."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Community"
        required: true
        schema:
          $ref: "#/definitions/Community"
      responses:
        201:
          description: "Community successfully created."
        400:
          description: "Community couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
    put:
      tags:
      - "Community"
      summary: "Update a Community"
      description: "Update a Community"
      operationId: "update"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Community"
        required: true
        schema:
          $ref: "#/definitions/Community"
      responses:
        204:
          description: "Successfully updated Community"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
  /communities/{id}:
    get:
      tags:
      - "Community"
      summary: "Gets a Community"
      description: "Get a Community user identified via its id"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        description: "Community id"
        required: true
        type: "string"
      responses:
        200:
          description: "a Community"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
        500:
          description: "An unexpected error occurred."
    delete:
      tags:
      - "Community"
      summary: "Deletes a Community"
      description: "Delete a Community user identified via its id"
      operationId: "deleteById"
      parameters:
      - name: "id"
        in: "path"
        description: "Community id"
        required: true
        type: "string"
      responses:
        204:
          description: "Community successfully deleted."
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
        500:
          description: "An unexpected error occurred."
  /communities/{commId}/approvers:
    get:
      tags:
      - "Community"
      summary: "Gets Approvers for a Community"
      description: "Get the approvers for a community"
      operationId: "getApprovers"
      parameters:
      - name: "commId"
        in: "path"
        description: "Community id"
        required: true
        type: "string"
      responses:
        200:
          description: "a List of Users"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
        500:
          description: "An unexpected error occurred."
    put:
      tags:
      - "Community"
      summary: "Assign an approver to a community"
      description: "Assign an approver to a Community"
      operationId: "assignApprover"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a user"
        required: true
        schema:
          $ref: "#/definitions/User"
      - name: "commId"
        in: "path"
        description: "the community ID"
        required: true
        type: "string"
      responses:
        204:
          description: "Successfully assigned an approver to a Community"
        403:
          description: "Forbidden"
        404:
          description: "The Community or User does not exist."
        500:
          description: "An unexpected error occured."
    delete:
      tags:
      - "Community"
      summary: "remove an approver from a Community"
      description: "remove an approver from a Community"
      operationId: "removeApprover"
      parameters:
      - in: "body"
        name: "body"
        description: "a User"
        required: true
        schema:
          $ref: "#/definitions/User"
      - name: "commId"
        in: "path"
        description: "Community Id"
        required: true
        type: "string"
      responses:
        204:
          description: "removed an approver from a Community."
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
        500:
          description: "An unexpected error occurred."
  /communities/{commId}/users:
    get:
      tags:
      - "Community"
      summary: "Gets All Users for a Community"
      description: "Get the users for a community"
      operationId: "getUsers"
      parameters:
      - name: "commId"
        in: "path"
        description: "Community id"
        required: true
        type: "string"
      responses:
        200:
          description: "a List of Users"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
        500:
          description: "An unexpected error occurred."
# STOP COMMUNITIES
##############################################################################
# START MYDETAILS
  /mydetails:
    get:
      tags:
      - "MyDetails"
      summary: "Get the current user"
      description: "Get the current user"
      operationId: "getCurrentUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "current User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    put:
      tags:
      - "MyDetails"
      summary: "Update "
      description: "Update the current user"
      operationId: "updateCurrentUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the Current User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: "Successfully updated User"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
# STOP MYDETAILS
##############################################################################
# START PERMISSIONS
  /permissions:
    get:
      tags:
      - "Permission"
      summary: "Get all Permissions"
      description: "Get all the Permissions"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Permissions"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    post:
      tags:
      - "Permission"
      summary: "Creates a Permission"
      description: "Creates a new a Permission."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Permission"
        required: true
        schema:
          $ref: "#/definitions/Permission"
      responses:
        201:
          description: "Permission successfully created."
        400:
          description: "Permission couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."  
    delete:
      tags:
      - "Permission"
      summary: "delete a Permission"
      description: "delete a Permission"
      operationId: "deleteAll"
      parameters:
      - in: "body"
        name: "body"
        description: "a Permission"
        required: true
        schema:
          $ref: "#/definitions/Permission"
      responses:
        204:
          description: "deleted a Permission."
        403:
          description: "Forbidden"
        404:
          description: "Permission does not exist."
        500:
          description: "An unexpected error occurred."
  /permissions/role/{roleId}:
    get:
      tags:
      - "Permission"
      summary: "Find all the Permissions for a Role by the roleId"
      description: "Find all the Permissions for a Role by the roleId"
      operationId: "getPermissionsByRoleId"
      parameters:
      - name: "roleId"
        in: "path"
        description: "Role id"
        required: true
        type: "string"
      responses:
        200:
          description: "a Permission"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "Role does not exist."
        500:
          description: "An unexpected error occurred."
  /permissions/{permission}:
    get:
      tags:
      - "Permission"
      summary: "Find all the Permissions (Roles and all) by the Permission string"
      description: "Find all the Permissions (Roles and all) by the Permission string"
      operationId: "getPermissionsByPermissionId"
      parameters:
      - name: "permission"
        in: "path"
        description: "permission string"
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Permissions"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
# STOP PERMISSIONS
##############################################################################
# START ROLES
  /roles:
    get:
      tags:
      - "Role"
      summary: "List of Roles"
      description: "Returns a list containing all Roles"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Roles"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    post:
      tags:
      - "Role"
      summary: "Create a new Role"
      description: "Create a new Role"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Role"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        201:
          description: "Role successfully created."
        400:
          description: "Role couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
    put:
      tags:
      - "Role"
      summary: "Update a Role"
      description: "Update a Role"
      operationId: "update"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a Role"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        204:
          description: "Successfully updated Role"
        403:
          description: "Forbidden"
        404:
          description: "The Role does not exist."
        500:
          description: "An unexpected error occured."
  /roles/{roleId}:
    get:
      tags:
      - "Role"
      summary: "Get a Role by Id"
      description: "Returns a Role with the given id"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A Role"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
# STOP ROLES
##############################################################################
# START USERS
  /users:
    get:
      tags:
      - "User"
      summary: "List of all users"
      description: "Returns a list containing all Users"
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of users"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden/not authorized"
        500:
          description: "An unexpected error occured."
    put:
      tags:
      - "User"
      summary: "changes a user"
      operationId: "updateUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the User"
        required: true
        schema:
          $ref: "#/definitions/User"
      produces:
      - "application/json"
      responses:
        204:
          description: "Successfully updated a User"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
  /users/{id}:
    get:
      tags:
      - "User"
      summary: "Get a user by Id"
      description: "Returns a User with the given id"
      operationId: "getById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /community/{communityId}/users:
    put:
      tags:
      - "User"
      summary: "Assign a User to a Community"
      operationId: "assignToCommunity"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the User"
        required: true
        schema:
          $ref: "#/definitions/User"
      - name: "communityId"
        in: "path"
        required: true
        type: "string"
      produces:
      - "application/json"
      responses:
        204:
          description: "Successfully assigned user to Community"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
# STOP USERS
##############################################################################
# START USERROLES
  /userRoles:
    post:
      tags:
      - "UserRole"
      summary: "Creates a UserRole"
      description: "Creates a UserRole"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "a UserRole"
        required: true
        schema:
          $ref: "#/definitions/UserRole"
      responses:
        201:
          description: "UserRole successfully created."
        400:
          description: "UserRole couldn't be created."
        403:
          description: "Forbidden"
        500:
          description: "An unexpected error occured."
    delete:
      tags:
      - "UserRole"
      summary: "delete a UserRole"
      description: "delete a UserRole"
      operationId: "deleteAll"
      parameters:
      - in: "body"
        name: "body"
        description: "a UserRole"
        required: true
        schema:
          $ref: "#/definitions/UserRole"
      responses:
        204:
          description: "deleted a UserRole."
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
  /userRoles/{userId}:
    get:
      tags:
      - "UserRole"
      summary: "Gets a UserRole"
      description: "Get a UserRole user identified via its id"
      operationId: "getById"
      parameters:
      - name: "userId"
        in: "path"
        description: "UserRole userId"
        required: true
        type: "string"
      responses:
        200:
          description: "a UserRole"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
    delete:
      tags:
      - "UserRole"
      summary: "Deletes a UserRole"
      description: "Delete a UserRole user identified via its userId"
      operationId: "deleteById"
      parameters:
      - name: "userId"
        in: "path"
        description: "UserRole userId"
        required: true
        type: "string"
      responses:
        204:
          description: "UserRole successfully deleted."
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
  /userRoles/community/{commId}:
     get:
      tags:
      - "UserRole"
      summary: "Gets all UserRoles for a Community"
      description: "Get all UserRoles for a Community id"
      operationId: "getUserRoles"
      parameters:
      - name: "commId"
        in: "path"
        description: "Community Id"
        required: true
        type: "string"
      responses:
        200:
          description: "List of UserRoles"
          schema:
            $ref: "#/definitions/RestResult"
        403:
          description: "Forbidden"
        404:
          description: "UserRole does not exist."
        500:
          description: "An unexpected error occurred."
# STOP USERROLES
##############################################################################
# START EXTERIMENTAL - The rest of these paths are here to play with
  /programs/fundLines:
    get:
      tags:
      - "FundLine"
      summary: "List of FundLine"
      description: "Returns a list containing all FundLine"
      operationId: "findall"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of FundLine"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /programs/fundLines/{id}:
    get:
      tags:
      - "FundLine"
      summary: "Get FundLine by Id"
      description: "Returns a FundLine with the given id"
      operationId: "find"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A FundLine"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /programs:
    get:
      tags:
      - "Program"
      summary: "List of Programs"
      description: "Returns a list containing all Programs"
      operationId: "findall"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Programs"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /tags/type/{type}:
    get:
      tags:
      - "Tag"
      summary: "Get Tags by type"
      description: "Returns a List of Tags with the given type"
      operationId: "findTagsByType"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A List of Tags"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /tags/name/{name}:
    get:
      tags:
      - "Tag"
      summary: "Get Tags by name"
      description: "Returns a List of Tags with the given type"
      operationId: "findTagsByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A List of Tags"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
# STOP EXTERIMENTAL
##############################################################################
# 
# END PATHS
#
#################################################################
#
# START DEFINITONS
# 
definitions:
  AuthUser:
    type: "object"
    properties:
      email:
        type: "string"
      fullName:
        type: "string"
      rolenames:
        type: "array"
        items:
          type: "string"
  Communication:
    type: "object"
    properties:
      primaryEmail:
        type: "string"
      primaryPhone:
        type: "string"
  Community:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      identifier:
        type: "string"
  Permission:
    type: "object"
    properties:
      id:
        type: "string"
      roleId:
        type: "string"
      permission:
        type: "string"
  RestResult:
    type: "object"
    properties:
      error:
        type: "string"
      result:
        type: "object"
  Role:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      desc:
        type: "string"
      communityId:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      cn:
        type: "string"
      suspended:
        type: "boolean"
      communication:
        type: "object"
        $ref: "#/definitions/Communication"
      communities:
        type: "array"
        items:
          type: "string"
      defaultCommunity:
        type: "string"
      preferences:
        type: "object"
        additionalProperties:
            type: string
  UserRole:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      roleId:
        type: "string"
#
##############################################################################
# EPERIMENTAL DEFINITIONS FROM HERE DOWN Are just to play with 
#
  Fund:
    type: "object"
    properties:
      year:
        type: "integer"
      amount:
        type: "number"
        format: "float"
  FundLine:
    type: "object"
    properties:
      id:
        type: "string"
      programId:
        type: "string"
      incrementNumber:
        type: "integer"
      description:
        type: "string"
      fiscalYear:
        type: "integer"
      tags:
        type: "array"
        items:
          $ref: '#/definitions/Tag'
      funds:
        type: "array"
        items:
          $ref: '#/definitions/Fund'
  Increment:
    type: "object"
    properties:
      incrementNumber:
        type: "integer"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: '#/definitions/Tag'
      fundingLineIds:
        type: "array"
        items:
          type: "string"
  Program:
    type: "object"
    properties:
      id:
        type: "string"
      programId:
        type: "string"
      programName:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: '#/definitions/Tag'
      pocId:
        type: "array"
        items:
          type: "string"
      increments:
        type: "array"
        items:
          $ref: '#/definitions/Increment'
  Tag:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
      name:
        type: "string"
      abbr:
        type: "string"
##############################################################################
# ENDFILE
