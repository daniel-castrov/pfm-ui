swagger: "2.0"
info:
  version: 0.0.1
  title: JSBIS Services
  description: API services for JSCBIS
basePath: "/api"
tags:
- name: "Blank"
- name: "Community"
- name: "Program"
- name: "FundLine"
- name: "Tag"
- name: "MyDetails"
- name: "User"
- name: "Role"
paths:
  /blank:
    get:
      tags:
      - "Blank"
      summary: ""
      description: ""
      operationId: "blank"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /communities:
    get:
      tags:
      - "Community"
      summary: "Get Communities"
      description: "Get all the communities"
      operationId: "findall"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Communities"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /community:  
    post:
      tags:
      - "Community"
      summary: "Creates a Community"
      description: "Adds a Community to the Communitylist."
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create a Community"
        required: true
        schema:
          $ref: "#/definitions/Community"
      responses:
        201:
          description: "Community successfully created."
        400:
          description: "Community couldn't be created."
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden"
  /community/{id}:
    delete:
      tags:
      - "Community"
      summary: "Deletes a Community"
      description: "Delete a Community user identified via its id"
      operationId: "deleteById"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        500:
          description: "An unexpected error occurred."
        204:
          description: "Community successfully deleted."
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
    get:
      tags:
      - "Community"
      summary: "Gets a Community"
      description: "Get a Community user identified via its id"
      operationId: "getById"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        200:
          description: "a community"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occurred."
        403:
          description: "Forbidden"
        404:
          description: "Community does not exist."
  /mydetails:
    get:
      tags:
      - "MyDetails"
      summary: "Get the current user"
      description: "Get the current user"
      operationId: "getCurrentUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "current User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
    put:
      tags:
      - "MyDetails"
      summary: "Update "
      description: "Update the current user"
      operationId: "updateCurrentUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the Current User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: "Successfully updated Communication"
        403:
          description: "Forbidden"
        404:
          description: "The User does not exist."
        500:
          description: "An unexpected error occured."
  /users:
    get:
      tags:
      - "User"
      summary: "List of all users"
      description: "Returns a list containing all users"
      operationId: "getAllUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of users"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /user:
    put:
      tags:
      - "User"
      summary: "changes a user"
      operationId: "updateUser"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the User"
        required: true
        schema:
          $ref: "#/definitions/User"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of users"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /user:
    post:
      tags:
      - "User"
      summary: "Creates a User"
      description: "Adds a User"
      operationId: "create"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create a User"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Community successfully created."
        400:
          description: "Community couldn't be created."
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden"
  /user/{id}:
    get:
      tags:
      - "User"
      summary: "Get a user by Id"
      description: "Returns a User with the given id"
      operationId: "get"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A User"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /program/findall:
    get:
      tags:
      - "Program"
      summary: "List of Programs"
      description: "Returns a list containing all Programs"
      operationId: "findall"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Programs"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /roles:
     get:
      tags:
      - "Role"
      summary: "List of Roles"
      description: "Returns a list containing all Roles"
      operationId: "findall"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of Roles"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /userRoles/{id}:
     get:
      tags:
      - "Role"
      summary: "List of Roles"
      description: "Returns a list containing all Roles for a user"
      operationId: "find"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A FundLine"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /fundLine/findall:
    get:
      tags:
      - "FundLine"
      summary: "List of FundLine"
      description: "Returns a list containing all FundLine"
      operationId: "findall"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of FundLine"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /fundLine/find/{id}:
    get:
      tags:
      - "FundLine"
      summary: "Get FundLine by Id"
      description: "Returns a FundLine with the given id"
      operationId: "find"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A FundLine"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /tag/find/{type}:
    get:
      tags:
      - "Tag"
      summary: "Get Tags by type"
      description: "Returns a List of Tags with the given type"
      operationId: "findTagsByType"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A List of Tags"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
  /tag/findname/{name}:
    get:
      tags:
      - "Tag"
      summary: "Get Tags by name"
      description: "Returns a List of Tags with the given type"
      operationId: "findTagsByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A List of Tags"
          schema:
            $ref: "#/definitions/RestResult"
        500:
          description: "An unexpected error occured."
        403:
          description: "Forbidden/not authorized"
definitions:
  RestResult:
    type: "object"
    properties:
      error:
        type: "string"
      result:
        type: "object"
  AuthUser:
    type: "object"
    properties:
      email:
        type: "string"
      fullName:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      cn:
        type: "string"
      suspended:
        type: "boolean"
      communications:
        type: "array"
        items:
          $ref: '#/definitions/Communication'
      preferences:
        type: "object"
        additionalProperties:
            type: string
  Role:
    type: "object"
    properties:
      id:
        type: "string"
      roleName:
        type: "string"
      roleDescription:
        type: "string"
  Permission:
    type: "object"
    properties:
      id:
        type: "string"
      roleName:
        type: "string"
      permission:
        type: "string"
  UserRole:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      roleName:
        type: "string"
  GrantedAuthority:
    type: "object"
    properties:
      authority:
        type: "string"
  Communication:
    type: "object"
    properties:
      type:
        type: "string"
        emun:
          - PHONE
          - EMAIL
      subtype:
        type: "string"
        emun:
          - PRIMARY
          - SECONDARY
          - ALTERNATE
      value:
        type: "string"
      confirmed:
        type: "boolean"
      preferred:
        type: "boolean"
  Tag:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
      name:
        type: "string"
      abbr:
        type: "string"
  Fund:
    type: "object"
    properties:
      year:
        type: "integer"
      amount:
        type: "number"
        format: "float"
  FundLine:
    type: "object"
    properties:
      id:
        type: "string"
      programId:
        type: "string"
      incrementNumber:
        type: "integer"
      description:
        type: "string"
      fiscalYear:
        type: "integer"
      tags:
        type: "array"
        items:
          $ref: '#/definitions/Tag'
      funds:
        type: "array"
        items:
          $ref: '#/definitions/Fund'
  Increment:
    type: "object"
    properties:
      incrementNumber:
        type: "integer"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: '#/definitions/Tag'
      fundingLineIds:
        type: "array"
        items:
          type: "string"
  Program:
    type: "object"
    properties:
      id:
        type: "string"
      programId:
        type: "string"
      programName:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: '#/definitions/Tag'
      pocId:
        type: "array"
        items:
          type: "string"
      increments:
        type: "array"
        items:
          $ref: '#/definitions/Increment'
  Community:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      identifier:
        type: "string"
